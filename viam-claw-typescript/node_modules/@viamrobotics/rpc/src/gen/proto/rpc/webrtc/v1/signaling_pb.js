// source: proto/rpc/webrtc/v1/signaling.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_rpc_status_pb = require('../../../../google/rpc/status_pb.js');
goog.object.extend(proto, google_rpc_status_pb);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerRequest', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerRequest.StageCase', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerRequestInitStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerResponse', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerResponse.StageCase', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerResponseInitStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.CallRequest', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.CallResponse', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.CallResponse.StageCase', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.CallResponseInitStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.CallResponseUpdateStage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.CallUpdateRequest', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.CallUpdateRequest.UpdateCase', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.CallUpdateResponse', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.ICECandidate', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.ICEServer', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.WebRTCConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.ICECandidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.ICECandidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.ICECandidate.displayName = 'proto.proto.rpc.webrtc.v1.ICECandidate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.CallRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.CallRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.CallRequest.displayName = 'proto.proto.rpc.webrtc.v1.CallRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.CallResponseInitStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.CallResponseInitStage.displayName = 'proto.proto.rpc.webrtc.v1.CallResponseInitStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.CallResponseUpdateStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.displayName = 'proto.proto.rpc.webrtc.v1.CallResponseUpdateStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.CallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.rpc.webrtc.v1.CallResponse.oneofGroups_);
};
goog.inherits(proto.proto.rpc.webrtc.v1.CallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.CallResponse.displayName = 'proto.proto.rpc.webrtc.v1.CallResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.rpc.webrtc.v1.CallUpdateRequest.oneofGroups_);
};
goog.inherits(proto.proto.rpc.webrtc.v1.CallUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.CallUpdateRequest.displayName = 'proto.proto.rpc.webrtc.v1.CallUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.CallUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.CallUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.CallUpdateResponse.displayName = 'proto.proto.rpc.webrtc.v1.CallUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.ICEServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.rpc.webrtc.v1.ICEServer.repeatedFields_, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.ICEServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.ICEServer.displayName = 'proto.proto.rpc.webrtc.v1.ICEServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.rpc.webrtc.v1.WebRTCConfig.repeatedFields_, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.WebRTCConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.WebRTCConfig.displayName = 'proto.proto.rpc.webrtc.v1.WebRTCConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerRequestInitStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.displayName = 'proto.proto.rpc.webrtc.v1.AnswerRequestInitStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.displayName = 'proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.displayName = 'proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.displayName = 'proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.rpc.webrtc.v1.AnswerRequest.oneofGroups_);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerRequest.displayName = 'proto.proto.rpc.webrtc.v1.AnswerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerResponseInitStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.displayName = 'proto.proto.rpc.webrtc.v1.AnswerResponseInitStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.displayName = 'proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.displayName = 'proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.displayName = 'proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.AnswerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.rpc.webrtc.v1.AnswerResponse.oneofGroups_);
};
goog.inherits(proto.proto.rpc.webrtc.v1.AnswerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.AnswerResponse.displayName = 'proto.proto.rpc.webrtc.v1.AnswerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.displayName = 'proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.displayName = 'proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.ICECandidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.ICECandidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ICECandidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sdpMid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sdpmLineIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    usernameFragment: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.ICECandidate;
  return proto.proto.rpc.webrtc.v1.ICECandidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.ICECandidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCandidate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdpMid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSdpmLineIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsernameFragment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.ICECandidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.ICECandidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ICECandidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string candidate = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.getCandidate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate} returns this
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.setCandidate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sdp_mid = 2;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.getSdpMid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate} returns this
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.setSdpMid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate} returns this
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.clearSdpMid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.hasSdpMid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 sdpm_line_index = 3;
 * @return {number}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.getSdpmLineIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate} returns this
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.setSdpmLineIndex = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate} returns this
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.clearSdpmLineIndex = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.hasSdpmLineIndex = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string username_fragment = 4;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.getUsernameFragment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate} returns this
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.setUsernameFragment = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.ICECandidate} returns this
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.clearUsernameFragment = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.ICECandidate.prototype.hasUsernameFragment = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.CallRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.CallRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.CallRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    disableTrickle: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.CallRequest}
 */
proto.proto.rpc.webrtc.v1.CallRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.CallRequest;
  return proto.proto.rpc.webrtc.v1.CallRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.CallRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.CallRequest}
 */
proto.proto.rpc.webrtc.v1.CallRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableTrickle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.CallRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.CallRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.CallRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisableTrickle();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string sdp = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.CallRequest.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.CallRequest} returns this
 */
proto.proto.rpc.webrtc.v1.CallRequest.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool disable_trickle = 2;
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.CallRequest.prototype.getDisableTrickle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.rpc.webrtc.v1.CallRequest} returns this
 */
proto.proto.rpc.webrtc.v1.CallRequest.prototype.setDisableTrickle = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.CallResponseInitStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.CallResponseInitStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponseInitStage}
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.CallResponseInitStage;
  return proto.proto.rpc.webrtc.v1.CallResponseInitStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.CallResponseInitStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponseInitStage}
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.CallResponseInitStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.CallResponseInitStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sdp = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.CallResponseInitStage} returns this
 */
proto.proto.rpc.webrtc.v1.CallResponseInitStage.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.CallResponseUpdateStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.proto.rpc.webrtc.v1.ICECandidate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponseUpdateStage}
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.CallResponseUpdateStage;
  return proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.CallResponseUpdateStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponseUpdateStage}
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.ICECandidate;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.ICECandidate.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.CallResponseUpdateStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.ICECandidate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ICECandidate candidate = 1;
 * @return {?proto.proto.rpc.webrtc.v1.ICECandidate}
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.prototype.getCandidate = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.ICECandidate} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.ICECandidate, 1));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.ICECandidate|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.CallResponseUpdateStage} returns this
*/
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.prototype.setCandidate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponseUpdateStage} returns this
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.prototype.clearCandidate = function() {
  return this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.rpc.webrtc.v1.CallResponse.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.proto.rpc.webrtc.v1.CallResponse.StageCase = {
  STAGE_NOT_SET: 0,
  INIT: 2,
  UPDATE: 3
};

/**
 * @return {proto.proto.rpc.webrtc.v1.CallResponse.StageCase}
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.getStageCase = function() {
  return /** @type {proto.proto.rpc.webrtc.v1.CallResponse.StageCase} */(jspb.Message.computeOneofCase(this, proto.proto.rpc.webrtc.v1.CallResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.CallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.CallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    init: (f = msg.getInit()) && proto.proto.rpc.webrtc.v1.CallResponseInitStage.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponse}
 */
proto.proto.rpc.webrtc.v1.CallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.CallResponse;
  return proto.proto.rpc.webrtc.v1.CallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.CallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponse}
 */
proto.proto.rpc.webrtc.v1.CallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.CallResponseInitStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.CallResponseInitStage.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 3:
      var value = new proto.proto.rpc.webrtc.v1.CallResponseUpdateStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.CallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.CallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.CallResponseInitStage.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.rpc.webrtc.v1.CallResponseUpdateStage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.CallResponse} returns this
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CallResponseInitStage init = 2;
 * @return {?proto.proto.rpc.webrtc.v1.CallResponseInitStage}
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.getInit = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.CallResponseInitStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.CallResponseInitStage, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.CallResponseInitStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.CallResponse} returns this
*/
proto.proto.rpc.webrtc.v1.CallResponse.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.rpc.webrtc.v1.CallResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponse} returns this
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.hasInit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CallResponseUpdateStage update = 3;
 * @return {?proto.proto.rpc.webrtc.v1.CallResponseUpdateStage}
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.getUpdate = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.CallResponseUpdateStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.CallResponseUpdateStage, 3));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.CallResponseUpdateStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.CallResponse} returns this
*/
proto.proto.rpc.webrtc.v1.CallResponse.prototype.setUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.rpc.webrtc.v1.CallResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.CallResponse} returns this
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.CallResponse.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.UpdateCase = {
  UPDATE_NOT_SET: 0,
  CANDIDATE: 2,
  DONE: 3,
  ERROR: 4
};

/**
 * @return {proto.proto.rpc.webrtc.v1.CallUpdateRequest.UpdateCase}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.getUpdateCase = function() {
  return /** @type {proto.proto.rpc.webrtc.v1.CallUpdateRequest.UpdateCase} */(jspb.Message.computeOneofCase(this, proto.proto.rpc.webrtc.v1.CallUpdateRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.CallUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    candidate: (f = msg.getCandidate()) && proto.proto.rpc.webrtc.v1.ICECandidate.toObject(includeInstance, f),
    done: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    error: (f = msg.getError()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.CallUpdateRequest;
  return proto.proto.rpc.webrtc.v1.CallUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.ICECandidate;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.ICECandidate.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDone(value);
      break;
    case 4:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.CallUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.ICECandidate.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} returns this
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ICECandidate candidate = 2;
 * @return {?proto.proto.rpc.webrtc.v1.ICECandidate}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.getCandidate = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.ICECandidate} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.ICECandidate, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.ICECandidate|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} returns this
*/
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.setCandidate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.rpc.webrtc.v1.CallUpdateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} returns this
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.clearCandidate = function() {
  return this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool done = 3;
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.getDone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} returns this
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.setDone = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.proto.rpc.webrtc.v1.CallUpdateRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} returns this
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.clearDone = function() {
  return jspb.Message.setOneofField(this, 3, proto.proto.rpc.webrtc.v1.CallUpdateRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.hasDone = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.rpc.Status error = 4;
 * @return {?proto.google.rpc.Status}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.getError = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 4));
};


/**
 * @param {?proto.google.rpc.Status|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} returns this
*/
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.rpc.webrtc.v1.CallUpdateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} returns this
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.CallUpdateRequest.prototype.hasError = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.CallUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.CallUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.CallUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateResponse}
 */
proto.proto.rpc.webrtc.v1.CallUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.CallUpdateResponse;
  return proto.proto.rpc.webrtc.v1.CallUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.CallUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.CallUpdateResponse}
 */
proto.proto.rpc.webrtc.v1.CallUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.CallUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.CallUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.CallUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.CallUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.rpc.webrtc.v1.ICEServer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.ICEServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.ICEServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ICEServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    urlsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    credential: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.ICEServer}
 */
proto.proto.rpc.webrtc.v1.ICEServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.ICEServer;
  return proto.proto.rpc.webrtc.v1.ICEServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.ICEServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.ICEServer}
 */
proto.proto.rpc.webrtc.v1.ICEServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.ICEServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.ICEServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ICEServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCredential();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated string urls = 1;
 * @return {!Array<string>}
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.getUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.rpc.webrtc.v1.ICEServer} returns this
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.setUrlsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.rpc.webrtc.v1.ICEServer} returns this
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.addUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.rpc.webrtc.v1.ICEServer} returns this
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.clearUrlsList = function() {
  return this.setUrlsList([]);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.ICEServer} returns this
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string credential = 3;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.getCredential = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.ICEServer} returns this
 */
proto.proto.rpc.webrtc.v1.ICEServer.prototype.setCredential = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.WebRTCConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.WebRTCConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    additionalIceServersList: jspb.Message.toObjectList(msg.getAdditionalIceServersList(),
    proto.proto.rpc.webrtc.v1.ICEServer.toObject, includeInstance),
    disableTrickle: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.WebRTCConfig}
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.WebRTCConfig;
  return proto.proto.rpc.webrtc.v1.WebRTCConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.WebRTCConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.WebRTCConfig}
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.ICEServer;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.ICEServer.deserializeBinaryFromReader);
      msg.addAdditionalIceServers(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableTrickle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.WebRTCConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.WebRTCConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdditionalIceServersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.ICEServer.serializeBinaryToWriter
    );
  }
  f = message.getDisableTrickle();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated ICEServer additional_ice_servers = 1;
 * @return {!Array<!proto.proto.rpc.webrtc.v1.ICEServer>}
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.prototype.getAdditionalIceServersList = function() {
  return /** @type{!Array<!proto.proto.rpc.webrtc.v1.ICEServer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.rpc.webrtc.v1.ICEServer, 1));
};


/**
 * @param {!Array<!proto.proto.rpc.webrtc.v1.ICEServer>} value
 * @return {!proto.proto.rpc.webrtc.v1.WebRTCConfig} returns this
*/
proto.proto.rpc.webrtc.v1.WebRTCConfig.prototype.setAdditionalIceServersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.rpc.webrtc.v1.ICEServer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.rpc.webrtc.v1.ICEServer}
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.prototype.addAdditionalIceServers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.rpc.webrtc.v1.ICEServer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.rpc.webrtc.v1.WebRTCConfig} returns this
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.prototype.clearAdditionalIceServersList = function() {
  return this.setAdditionalIceServersList([]);
};


/**
 * optional bool disable_trickle = 2;
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.prototype.getDisableTrickle = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.rpc.webrtc.v1.WebRTCConfig} returns this
 */
proto.proto.rpc.webrtc.v1.WebRTCConfig.prototype.setDisableTrickle = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    optionalConfig: (f = msg.getOptionalConfig()) && proto.proto.rpc.webrtc.v1.WebRTCConfig.toObject(includeInstance, f),
    deadline: (f = msg.getDeadline()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerRequestInitStage;
  return proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.WebRTCConfig;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.WebRTCConfig.deserializeBinaryFromReader);
      msg.setOptionalConfig(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeadline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptionalConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.WebRTCConfig.serializeBinaryToWriter
    );
  }
  f = message.getDeadline();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sdp = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional WebRTCConfig optional_config = 2;
 * @return {?proto.proto.rpc.webrtc.v1.WebRTCConfig}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.getOptionalConfig = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.WebRTCConfig} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.WebRTCConfig, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.WebRTCConfig|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.setOptionalConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.clearOptionalConfig = function() {
  return this.setOptionalConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.hasOptionalConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp deadline = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.getDeadline = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.setDeadline = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.clearDeadline = function() {
  return this.setDeadline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.prototype.hasDeadline = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.proto.rpc.webrtc.v1.ICECandidate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage;
  return proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.ICECandidate;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.ICECandidate.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.ICECandidate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ICECandidate candidate = 1;
 * @return {?proto.proto.rpc.webrtc.v1.ICECandidate}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.prototype.getCandidate = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.ICECandidate} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.ICECandidate, 1));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.ICECandidate|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.prototype.setCandidate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.prototype.clearCandidate = function() {
  return this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage;
  return proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage;
  return proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/**
 * @param {?proto.google.rpc.Status|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.StageCase = {
  STAGE_NOT_SET: 0,
  INIT: 2,
  UPDATE: 3,
  DONE: 4,
  ERROR: 5
};

/**
 * @return {proto.proto.rpc.webrtc.v1.AnswerRequest.StageCase}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.getStageCase = function() {
  return /** @type {proto.proto.rpc.webrtc.v1.AnswerRequest.StageCase} */(jspb.Message.computeOneofCase(this, proto.proto.rpc.webrtc.v1.AnswerRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    init: (f = msg.getInit()) && proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.toObject(includeInstance, f),
    done: (f = msg.getDone()) && proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerRequest;
  return proto.proto.rpc.webrtc.v1.AnswerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.AnswerRequestInitStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 3:
      var value = new proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    case 4:
      var value = new proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.deserializeBinaryFromReader);
      msg.setDone(value);
      break;
    case 5:
      var value = new proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.AnswerRequestInitStage.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage.serializeBinaryToWriter
    );
  }
  f = message.getDone();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AnswerRequestInitStage init = 2;
 * @return {?proto.proto.rpc.webrtc.v1.AnswerRequestInitStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.getInit = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.AnswerRequestInitStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.AnswerRequestInitStage, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.AnswerRequestInitStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.rpc.webrtc.v1.AnswerRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.hasInit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AnswerRequestUpdateStage update = 3;
 * @return {?proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.getUpdate = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage, 3));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.AnswerRequestUpdateStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.setUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.rpc.webrtc.v1.AnswerRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AnswerRequestDoneStage done = 4;
 * @return {?proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.getDone = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage, 4));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.AnswerRequestDoneStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.setDone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.rpc.webrtc.v1.AnswerRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.clearDone = function() {
  return this.setDone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.hasDone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AnswerRequestErrorStage error = 5;
 * @return {?proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.getError = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage, 5));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.AnswerRequestErrorStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.rpc.webrtc.v1.AnswerRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerRequest} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerRequest.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseInitStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseInitStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerResponseInitStage;
  return proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseInitStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseInitStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseInitStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sdp = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseInitStage} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.prototype.setSdp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.proto.rpc.webrtc.v1.ICECandidate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage;
  return proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.ICECandidate;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.ICECandidate.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.ICECandidate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ICECandidate candidate = 1;
 * @return {?proto.proto.rpc.webrtc.v1.ICECandidate}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.prototype.getCandidate = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.ICECandidate} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.ICECandidate, 1));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.ICECandidate|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.prototype.setCandidate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.prototype.clearCandidate = function() {
  return this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage;
  return proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage;
  return proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/**
 * @param {?proto.google.rpc.Status|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.StageCase = {
  STAGE_NOT_SET: 0,
  INIT: 2,
  UPDATE: 3,
  DONE: 4,
  ERROR: 5
};

/**
 * @return {proto.proto.rpc.webrtc.v1.AnswerResponse.StageCase}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.getStageCase = function() {
  return /** @type {proto.proto.rpc.webrtc.v1.AnswerResponse.StageCase} */(jspb.Message.computeOneofCase(this, proto.proto.rpc.webrtc.v1.AnswerResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.AnswerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    init: (f = msg.getInit()) && proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.toObject(includeInstance, f),
    done: (f = msg.getDone()) && proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.AnswerResponse;
  return proto.proto.rpc.webrtc.v1.AnswerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.AnswerResponseInitStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 3:
      var value = new proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    case 4:
      var value = new proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.deserializeBinaryFromReader);
      msg.setDone(value);
      break;
    case 5:
      var value = new proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.AnswerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.AnswerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.AnswerResponseInitStage.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage.serializeBinaryToWriter
    );
  }
  f = message.getDone();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AnswerResponseInitStage init = 2;
 * @return {?proto.proto.rpc.webrtc.v1.AnswerResponseInitStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.getInit = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.AnswerResponseInitStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.AnswerResponseInitStage, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.AnswerResponseInitStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.rpc.webrtc.v1.AnswerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.hasInit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AnswerResponseUpdateStage update = 3;
 * @return {?proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.getUpdate = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage, 3));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.AnswerResponseUpdateStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.setUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.rpc.webrtc.v1.AnswerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.clearUpdate = function() {
  return this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AnswerResponseDoneStage done = 4;
 * @return {?proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.getDone = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage, 4));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.AnswerResponseDoneStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.setDone = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.rpc.webrtc.v1.AnswerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.clearDone = function() {
  return this.setDone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.hasDone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AnswerResponseErrorStage error = 5;
 * @return {?proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.getError = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage, 5));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.AnswerResponseErrorStage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
*/
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.rpc.webrtc.v1.AnswerResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.AnswerResponse} returns this
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.AnswerResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest;
  return proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.proto.rpc.webrtc.v1.WebRTCConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse;
  return proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.WebRTCConfig;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.WebRTCConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.WebRTCConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional WebRTCConfig config = 1;
 * @return {?proto.proto.rpc.webrtc.v1.WebRTCConfig}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.WebRTCConfig} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.WebRTCConfig, 1));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.WebRTCConfig|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse} returns this
*/
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse} returns this
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.proto.rpc.webrtc.v1);
