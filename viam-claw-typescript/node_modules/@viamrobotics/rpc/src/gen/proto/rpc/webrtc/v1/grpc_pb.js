// source: proto/rpc/webrtc/v1/grpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_rpc_status_pb = require('../../../../google/rpc/status_pb.js');
goog.object.extend(proto, google_rpc_status_pb);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.Metadata', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.PacketMessage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.Request', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.Request.TypeCase', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.RequestHeaders', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.RequestMessage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.Response', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.Response.TypeCase', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.ResponseHeaders', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.ResponseMessage', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.ResponseTrailers', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.Stream', null, global);
goog.exportSymbol('proto.proto.rpc.webrtc.v1.Strings', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.PacketMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.PacketMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.PacketMessage.displayName = 'proto.proto.rpc.webrtc.v1.PacketMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.Stream.displayName = 'proto.proto.rpc.webrtc.v1.Stream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.rpc.webrtc.v1.Request.oneofGroups_);
};
goog.inherits(proto.proto.rpc.webrtc.v1.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.Request.displayName = 'proto.proto.rpc.webrtc.v1.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.RequestHeaders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.RequestHeaders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.RequestHeaders.displayName = 'proto.proto.rpc.webrtc.v1.RequestHeaders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.RequestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.RequestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.RequestMessage.displayName = 'proto.proto.rpc.webrtc.v1.RequestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.rpc.webrtc.v1.Response.oneofGroups_);
};
goog.inherits(proto.proto.rpc.webrtc.v1.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.Response.displayName = 'proto.proto.rpc.webrtc.v1.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.ResponseHeaders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.ResponseHeaders.displayName = 'proto.proto.rpc.webrtc.v1.ResponseHeaders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.ResponseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.ResponseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.ResponseMessage.displayName = 'proto.proto.rpc.webrtc.v1.ResponseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.ResponseTrailers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.ResponseTrailers.displayName = 'proto.proto.rpc.webrtc.v1.ResponseTrailers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.Strings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.rpc.webrtc.v1.Strings.repeatedFields_, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.Strings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.Strings.displayName = 'proto.proto.rpc.webrtc.v1.Strings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.rpc.webrtc.v1.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.rpc.webrtc.v1.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.rpc.webrtc.v1.Metadata.displayName = 'proto.proto.rpc.webrtc.v1.Metadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.PacketMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.PacketMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.PacketMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.PacketMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    eom: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.PacketMessage}
 */
proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.PacketMessage;
  return proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.PacketMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.PacketMessage}
 */
proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.PacketMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.PacketMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.PacketMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.PacketMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEom();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.PacketMessage.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.PacketMessage.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.PacketMessage.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.rpc.webrtc.v1.PacketMessage} returns this
 */
proto.proto.rpc.webrtc.v1.PacketMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool eom = 2;
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.PacketMessage.prototype.getEom = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.rpc.webrtc.v1.PacketMessage} returns this
 */
proto.proto.rpc.webrtc.v1.PacketMessage.prototype.setEom = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.Stream}
 */
proto.proto.rpc.webrtc.v1.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.Stream;
  return proto.proto.rpc.webrtc.v1.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.Stream}
 */
proto.proto.rpc.webrtc.v1.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.rpc.webrtc.v1.Stream.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.rpc.webrtc.v1.Stream} returns this
 */
proto.proto.rpc.webrtc.v1.Stream.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.rpc.webrtc.v1.Request.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.proto.rpc.webrtc.v1.Request.TypeCase = {
  TYPE_NOT_SET: 0,
  HEADERS: 2,
  MESSAGE: 3,
  RST_STREAM: 4
};

/**
 * @return {proto.proto.rpc.webrtc.v1.Request.TypeCase}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.getTypeCase = function() {
  return /** @type {proto.proto.rpc.webrtc.v1.Request.TypeCase} */(jspb.Message.computeOneofCase(this, proto.proto.rpc.webrtc.v1.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.proto.rpc.webrtc.v1.Stream.toObject(includeInstance, f),
    headers: (f = msg.getHeaders()) && proto.proto.rpc.webrtc.v1.RequestHeaders.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.proto.rpc.webrtc.v1.RequestMessage.toObject(includeInstance, f),
    rstStream: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.Request}
 */
proto.proto.rpc.webrtc.v1.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.Request;
  return proto.proto.rpc.webrtc.v1.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.Request}
 */
proto.proto.rpc.webrtc.v1.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.Stream;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.RequestHeaders;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.RequestHeaders.deserializeBinaryFromReader);
      msg.setHeaders(value);
      break;
    case 3:
      var value = new proto.proto.rpc.webrtc.v1.RequestMessage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.RequestMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRstStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.Stream.serializeBinaryToWriter
    );
  }
  f = message.getHeaders();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.RequestHeaders.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.rpc.webrtc.v1.RequestMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.proto.rpc.webrtc.v1.Stream}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.getStream = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.Stream} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.Stream, 1));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.Stream|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.Request} returns this
*/
proto.proto.rpc.webrtc.v1.Request.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.Request} returns this
 */
proto.proto.rpc.webrtc.v1.Request.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestHeaders headers = 2;
 * @return {?proto.proto.rpc.webrtc.v1.RequestHeaders}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.getHeaders = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.RequestHeaders} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.RequestHeaders, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.RequestHeaders|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.Request} returns this
*/
proto.proto.rpc.webrtc.v1.Request.prototype.setHeaders = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.rpc.webrtc.v1.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.Request} returns this
 */
proto.proto.rpc.webrtc.v1.Request.prototype.clearHeaders = function() {
  return this.setHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.hasHeaders = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestMessage message = 3;
 * @return {?proto.proto.rpc.webrtc.v1.RequestMessage}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.getMessage = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.RequestMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.RequestMessage, 3));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.RequestMessage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.Request} returns this
*/
proto.proto.rpc.webrtc.v1.Request.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.rpc.webrtc.v1.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.Request} returns this
 */
proto.proto.rpc.webrtc.v1.Request.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool rst_stream = 4;
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.getRstStream = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.rpc.webrtc.v1.Request} returns this
 */
proto.proto.rpc.webrtc.v1.Request.prototype.setRstStream = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.proto.rpc.webrtc.v1.Request.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.Request} returns this
 */
proto.proto.rpc.webrtc.v1.Request.prototype.clearRstStream = function() {
  return jspb.Message.setOneofField(this, 4, proto.proto.rpc.webrtc.v1.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Request.prototype.hasRstStream = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.RequestHeaders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.RequestHeaders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metadata: (f = msg.getMetadata()) && proto.proto.rpc.webrtc.v1.Metadata.toObject(includeInstance, f),
    timeout: (f = msg.getTimeout()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.RequestHeaders}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.RequestHeaders;
  return proto.proto.rpc.webrtc.v1.RequestHeaders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.RequestHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.RequestHeaders}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.Metadata;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.RequestHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.RequestHeaders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.rpc.webrtc.v1.RequestHeaders} returns this
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.setMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Metadata metadata = 2;
 * @return {?proto.proto.rpc.webrtc.v1.Metadata}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.getMetadata = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.Metadata, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.Metadata|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.RequestHeaders} returns this
*/
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.RequestHeaders} returns this
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Duration timeout = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.getTimeout = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 3));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.RequestHeaders} returns this
*/
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.setTimeout = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.RequestHeaders} returns this
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.clearTimeout = function() {
  return this.setTimeout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.RequestHeaders.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.RequestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.RequestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.RequestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasMessage: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    packetMessage: (f = msg.getPacketMessage()) && proto.proto.rpc.webrtc.v1.PacketMessage.toObject(includeInstance, f),
    eos: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.RequestMessage}
 */
proto.proto.rpc.webrtc.v1.RequestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.RequestMessage;
  return proto.proto.rpc.webrtc.v1.RequestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.RequestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.RequestMessage}
 */
proto.proto.rpc.webrtc.v1.RequestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasMessage(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.PacketMessage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinaryFromReader);
      msg.setPacketMessage(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.RequestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.RequestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.RequestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasMessage();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPacketMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.PacketMessage.serializeBinaryToWriter
    );
  }
  f = message.getEos();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool has_message = 1;
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.getHasMessage = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.rpc.webrtc.v1.RequestMessage} returns this
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.setHasMessage = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional PacketMessage packet_message = 2;
 * @return {?proto.proto.rpc.webrtc.v1.PacketMessage}
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.getPacketMessage = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.PacketMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.PacketMessage, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.PacketMessage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.RequestMessage} returns this
*/
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.setPacketMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.RequestMessage} returns this
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.clearPacketMessage = function() {
  return this.setPacketMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.hasPacketMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool eos = 3;
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.getEos = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.rpc.webrtc.v1.RequestMessage} returns this
 */
proto.proto.rpc.webrtc.v1.RequestMessage.prototype.setEos = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.rpc.webrtc.v1.Response.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.proto.rpc.webrtc.v1.Response.TypeCase = {
  TYPE_NOT_SET: 0,
  HEADERS: 2,
  MESSAGE: 3,
  TRAILERS: 4
};

/**
 * @return {proto.proto.rpc.webrtc.v1.Response.TypeCase}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.getTypeCase = function() {
  return /** @type {proto.proto.rpc.webrtc.v1.Response.TypeCase} */(jspb.Message.computeOneofCase(this, proto.proto.rpc.webrtc.v1.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.proto.rpc.webrtc.v1.Stream.toObject(includeInstance, f),
    headers: (f = msg.getHeaders()) && proto.proto.rpc.webrtc.v1.ResponseHeaders.toObject(includeInstance, f),
    message: (f = msg.getMessage()) && proto.proto.rpc.webrtc.v1.ResponseMessage.toObject(includeInstance, f),
    trailers: (f = msg.getTrailers()) && proto.proto.rpc.webrtc.v1.ResponseTrailers.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.Response}
 */
proto.proto.rpc.webrtc.v1.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.Response;
  return proto.proto.rpc.webrtc.v1.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.Response}
 */
proto.proto.rpc.webrtc.v1.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.Stream;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.ResponseHeaders;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.ResponseHeaders.deserializeBinaryFromReader);
      msg.setHeaders(value);
      break;
    case 3:
      var value = new proto.proto.rpc.webrtc.v1.ResponseMessage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.ResponseMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 4:
      var value = new proto.proto.rpc.webrtc.v1.ResponseTrailers;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.ResponseTrailers.deserializeBinaryFromReader);
      msg.setTrailers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.Stream.serializeBinaryToWriter
    );
  }
  f = message.getHeaders();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.ResponseHeaders.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.rpc.webrtc.v1.ResponseMessage.serializeBinaryToWriter
    );
  }
  f = message.getTrailers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.proto.rpc.webrtc.v1.ResponseTrailers.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.proto.rpc.webrtc.v1.Stream}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.getStream = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.Stream} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.Stream, 1));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.Stream|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.Response} returns this
*/
proto.proto.rpc.webrtc.v1.Response.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.Response} returns this
 */
proto.proto.rpc.webrtc.v1.Response.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponseHeaders headers = 2;
 * @return {?proto.proto.rpc.webrtc.v1.ResponseHeaders}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.getHeaders = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.ResponseHeaders} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.ResponseHeaders, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.ResponseHeaders|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.Response} returns this
*/
proto.proto.rpc.webrtc.v1.Response.prototype.setHeaders = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.proto.rpc.webrtc.v1.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.Response} returns this
 */
proto.proto.rpc.webrtc.v1.Response.prototype.clearHeaders = function() {
  return this.setHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.hasHeaders = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponseMessage message = 3;
 * @return {?proto.proto.rpc.webrtc.v1.ResponseMessage}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.getMessage = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.ResponseMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.ResponseMessage, 3));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.ResponseMessage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.Response} returns this
*/
proto.proto.rpc.webrtc.v1.Response.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.rpc.webrtc.v1.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.Response} returns this
 */
proto.proto.rpc.webrtc.v1.Response.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ResponseTrailers trailers = 4;
 * @return {?proto.proto.rpc.webrtc.v1.ResponseTrailers}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.getTrailers = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.ResponseTrailers} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.ResponseTrailers, 4));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.ResponseTrailers|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.Response} returns this
*/
proto.proto.rpc.webrtc.v1.Response.prototype.setTrailers = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.proto.rpc.webrtc.v1.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.Response} returns this
 */
proto.proto.rpc.webrtc.v1.Response.prototype.clearTrailers = function() {
  return this.setTrailers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.Response.prototype.hasTrailers = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.ResponseHeaders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.ResponseHeaders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.proto.rpc.webrtc.v1.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseHeaders}
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.ResponseHeaders;
  return proto.proto.rpc.webrtc.v1.ResponseHeaders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.ResponseHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseHeaders}
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.Metadata;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.ResponseHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.ResponseHeaders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional Metadata metadata = 1;
 * @return {?proto.proto.rpc.webrtc.v1.Metadata}
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.getMetadata = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.Metadata, 1));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.Metadata|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.ResponseHeaders} returns this
*/
proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseHeaders} returns this
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.ResponseHeaders.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.ResponseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.ResponseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetMessage: (f = msg.getPacketMessage()) && proto.proto.rpc.webrtc.v1.PacketMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseMessage}
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.ResponseMessage;
  return proto.proto.rpc.webrtc.v1.ResponseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.ResponseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseMessage}
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.rpc.webrtc.v1.PacketMessage;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.PacketMessage.deserializeBinaryFromReader);
      msg.setPacketMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.ResponseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.ResponseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.rpc.webrtc.v1.PacketMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional PacketMessage packet_message = 1;
 * @return {?proto.proto.rpc.webrtc.v1.PacketMessage}
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.getPacketMessage = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.PacketMessage} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.PacketMessage, 1));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.PacketMessage|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.ResponseMessage} returns this
*/
proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.setPacketMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseMessage} returns this
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.clearPacketMessage = function() {
  return this.setPacketMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.ResponseMessage.prototype.hasPacketMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.ResponseTrailers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.ResponseTrailers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.proto.rpc.webrtc.v1.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseTrailers}
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.ResponseTrailers;
  return proto.proto.rpc.webrtc.v1.ResponseTrailers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.ResponseTrailers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseTrailers}
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.proto.rpc.webrtc.v1.Metadata;
      reader.readMessage(value,proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.ResponseTrailers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.ResponseTrailers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/**
 * @param {?proto.google.rpc.Status|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.ResponseTrailers} returns this
*/
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseTrailers} returns this
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Metadata metadata = 2;
 * @return {?proto.proto.rpc.webrtc.v1.Metadata}
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.getMetadata = function() {
  return /** @type{?proto.proto.rpc.webrtc.v1.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.rpc.webrtc.v1.Metadata, 2));
};


/**
 * @param {?proto.proto.rpc.webrtc.v1.Metadata|undefined} value
 * @return {!proto.proto.rpc.webrtc.v1.ResponseTrailers} returns this
*/
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.rpc.webrtc.v1.ResponseTrailers} returns this
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.rpc.webrtc.v1.ResponseTrailers.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.rpc.webrtc.v1.Strings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.Strings.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.Strings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.Strings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Strings.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.Strings}
 */
proto.proto.rpc.webrtc.v1.Strings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.Strings;
  return proto.proto.rpc.webrtc.v1.Strings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.Strings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.Strings}
 */
proto.proto.rpc.webrtc.v1.Strings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.Strings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.Strings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.Strings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Strings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.proto.rpc.webrtc.v1.Strings.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.rpc.webrtc.v1.Strings} returns this
 */
proto.proto.rpc.webrtc.v1.Strings.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.rpc.webrtc.v1.Strings} returns this
 */
proto.proto.rpc.webrtc.v1.Strings.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.rpc.webrtc.v1.Strings} returns this
 */
proto.proto.rpc.webrtc.v1.Strings.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.rpc.webrtc.v1.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.rpc.webrtc.v1.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.rpc.webrtc.v1.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    mdMap: (f = msg.getMdMap()) ? f.toObject(includeInstance, proto.proto.rpc.webrtc.v1.Strings.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.rpc.webrtc.v1.Metadata}
 */
proto.proto.rpc.webrtc.v1.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.rpc.webrtc.v1.Metadata;
  return proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.rpc.webrtc.v1.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.rpc.webrtc.v1.Metadata}
 */
proto.proto.rpc.webrtc.v1.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMdMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.rpc.webrtc.v1.Strings.deserializeBinaryFromReader, "", new proto.proto.rpc.webrtc.v1.Strings());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.rpc.webrtc.v1.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.rpc.webrtc.v1.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.rpc.webrtc.v1.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMdMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.rpc.webrtc.v1.Strings.serializeBinaryToWriter);
  }
};


/**
 * map<string, Strings> md = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.rpc.webrtc.v1.Strings>}
 */
proto.proto.rpc.webrtc.v1.Metadata.prototype.getMdMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.rpc.webrtc.v1.Strings>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.proto.rpc.webrtc.v1.Strings));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.rpc.webrtc.v1.Metadata} returns this
 */
proto.proto.rpc.webrtc.v1.Metadata.prototype.clearMdMap = function() {
  this.getMdMap().clear();
  return this;};


goog.object.extend(exports, proto.proto.rpc.webrtc.v1);
