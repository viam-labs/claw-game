/**
 * @fileoverview gRPC-Web generated client stub for proto.rpc.webrtc.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v0.0.0
// source: proto/rpc/webrtc/v1/signaling.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')

var google_rpc_status_pb = require('../../../../google/rpc/status_pb.js')
const proto = {};
proto.proto = {};
proto.proto.rpc = {};
proto.proto.rpc.webrtc = {};
proto.proto.rpc.webrtc.v1 = require('./signaling_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.rpc.webrtc.v1.SignalingServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.proto.rpc.webrtc.v1.SignalingServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.rpc.webrtc.v1.CallRequest,
 *   !proto.proto.rpc.webrtc.v1.CallResponse>}
 */
const methodDescriptor_SignalingService_Call = new grpc.web.MethodDescriptor(
  '/proto.rpc.webrtc.v1.SignalingService/Call',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.proto.rpc.webrtc.v1.CallRequest,
  proto.proto.rpc.webrtc.v1.CallResponse,
  /**
   * @param {!proto.proto.rpc.webrtc.v1.CallRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.rpc.webrtc.v1.CallResponse.deserializeBinary
);


/**
 * @param {!proto.proto.rpc.webrtc.v1.CallRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.rpc.webrtc.v1.CallResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.rpc.webrtc.v1.SignalingServiceClient.prototype.call =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.rpc.webrtc.v1.SignalingService/Call',
      request,
      metadata || {},
      methodDescriptor_SignalingService_Call);
};


/**
 * @param {!proto.proto.rpc.webrtc.v1.CallRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.proto.rpc.webrtc.v1.CallResponse>}
 *     The XHR Node Readable Stream
 */
proto.proto.rpc.webrtc.v1.SignalingServicePromiseClient.prototype.call =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/proto.rpc.webrtc.v1.SignalingService/Call',
      request,
      metadata || {},
      methodDescriptor_SignalingService_Call);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.rpc.webrtc.v1.CallUpdateRequest,
 *   !proto.proto.rpc.webrtc.v1.CallUpdateResponse>}
 */
const methodDescriptor_SignalingService_CallUpdate = new grpc.web.MethodDescriptor(
  '/proto.rpc.webrtc.v1.SignalingService/CallUpdate',
  grpc.web.MethodType.UNARY,
  proto.proto.rpc.webrtc.v1.CallUpdateRequest,
  proto.proto.rpc.webrtc.v1.CallUpdateResponse,
  /**
   * @param {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.rpc.webrtc.v1.CallUpdateResponse.deserializeBinary
);


/**
 * @param {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.rpc.webrtc.v1.CallUpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.rpc.webrtc.v1.CallUpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.rpc.webrtc.v1.SignalingServiceClient.prototype.callUpdate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.rpc.webrtc.v1.SignalingService/CallUpdate',
      request,
      metadata || {},
      methodDescriptor_SignalingService_CallUpdate,
      callback);
};


/**
 * @param {!proto.proto.rpc.webrtc.v1.CallUpdateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.rpc.webrtc.v1.CallUpdateResponse>}
 *     Promise that resolves to the response
 */
proto.proto.rpc.webrtc.v1.SignalingServicePromiseClient.prototype.callUpdate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.rpc.webrtc.v1.SignalingService/CallUpdate',
      request,
      metadata || {},
      methodDescriptor_SignalingService_CallUpdate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest,
 *   !proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse>}
 */
const methodDescriptor_SignalingService_OptionalWebRTCConfig = new grpc.web.MethodDescriptor(
  '/proto.rpc.webrtc.v1.SignalingService/OptionalWebRTCConfig',
  grpc.web.MethodType.UNARY,
  proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest,
  proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse,
  /**
   * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse.deserializeBinary
);


/**
 * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.proto.rpc.webrtc.v1.SignalingServiceClient.prototype.optionalWebRTCConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/proto.rpc.webrtc.v1.SignalingService/OptionalWebRTCConfig',
      request,
      metadata || {},
      methodDescriptor_SignalingService_OptionalWebRTCConfig,
      callback);
};


/**
 * @param {!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse>}
 *     Promise that resolves to the response
 */
proto.proto.rpc.webrtc.v1.SignalingServicePromiseClient.prototype.optionalWebRTCConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/proto.rpc.webrtc.v1.SignalingService/OptionalWebRTCConfig',
      request,
      metadata || {},
      methodDescriptor_SignalingService_OptionalWebRTCConfig);
};


module.exports = proto.proto.rpc.webrtc.v1;

